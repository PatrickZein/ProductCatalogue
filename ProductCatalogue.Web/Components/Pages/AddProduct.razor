@page "/add-product"
@inject HttpClient Http
@using System.Net.Http.Json

<h3>Add New Product</h3>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="newProduct" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" @bind-Value="newProduct.Name" />
    </div>
    <div class="mb-3">
        <label for="type" class="form-label">Type</label>
        <InputText id="type" class="form-control" @bind-Value="newProduct.Type" />
    </div>
    <div class="mb-3">
        <label for="colours" class="form-label">Colours</label>
        <InputText id="colours" class="form-control" @bind-Value="newProduct.Colours" />
    </div>
    <button type="submit" class="btn btn-primary">Add Product</button>
</EditForm>

@code {
    private CreateProductDto newProduct = new();
    private string? successMessage;
    private string? errorMessage;

    private async Task HandleValidSubmit()
    {
        successMessage = null;
        errorMessage = null;
        var response = await Http.PostAsJsonAsync("api/products", newProduct);
        if (response.IsSuccessStatusCode)
        {
            successMessage = "Product added successfully!";
            newProduct = new(); // Reset form
        }
        else
        {
            errorMessage = "Failed to add product.";
        }
    }

    public class CreateProductDto
    {
        public string Name { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public string Colours { get; set; } = string.Empty;
    }
}